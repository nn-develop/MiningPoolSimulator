import requests
import time
import os

POOL_URL = os.getenv("POOL_URL")

class Miner:
    """
    Class representing a mining unit participating in a mining pool.

    Attributes:
        miner_id (str): Unique identifier for the miner.
        hash_rate (float): The hash rate of the miner.
        currently_active (bool): Status of the miner (True if active).
        total_shares (int): The total number of shares generated by the miner.
        reward (float): Total reward earned by the miner.
    """

    def __init__(self, miner_id: str, miner_api_key: str, hash_rate: float):
        """
        Initializes a new miner with a unique identifier and default attributes.

        Args:
            miner_id (str): The unique identifier for this miner.
            hash_rate (float): The hash rate for this miner.
        """
        self.miner_id: str = miner_id
        self.miner_api_key: str = miner_api_key
        self.hash_rate: float = hash_rate
        self.currently_active: bool = False
        self.total_shares: int = 0
        self.reward: float = 0.0

    def connect_to_pool(self) -> dict:
        """
        Connects the miner to the pool.

        Returns:
            dict: Response data from the pool.
        
        Raises:
            Exception: If the connection to the pool fails.
        """
        payload = {
            "miner_id": self.miner_id,
            "hash_rate": self.hash_rate
        }
        headers = {
            "Authorization": f"Bearer {self.miner_api_key}"
        }

        try:
            response = requests.post(f"{POOL_URL}/connect", json=payload, headers=headers)
            response.raise_for_status()
            self.currently_active = True
            return response.json()
        except requests.RequestException as e:
            raise Exception(f"Failed to connect to the pool: {e}")

    def generate_share(self) -> dict:
        """
        Simulates the generation of a share by the miner and sends it to the pool.

        Returns:
            dict: Response data from the pool regarding the submitted share.
        
        Raises:
            Exception: If sending the share to the pool fails.
        """
        if not self.currently_active:
            raise Exception("Miner is not currently connected to the pool.")

        share_data = {
            "miner_id": self.miner_id,
            "share_data": f"share_{time.time()}",
            "timestamp": time.time()
        }
        headers = {
            "Authorization": f"Bearer {self.miner_api_key}"
        }

        try:
            response = requests.post(f"{POOL_URL}/submit_share", json=share_data, headers=headers)
            response.raise_for_status()
            self.total_shares += 1
            return response.json()
        except requests.RequestException as e:
            raise Exception(f"Failed to submit share: {e}")

    def get_reward(self) -> float:
        """
        Retrieves the current reward balance for this miner.

        Returns:
            float: The current reward balance.
        
        Raises:
            Exception: If the request to the pool fails.
        """
        headers = {
            "Authorization": f"Bearer {self.miner_api_key}"
        }
        params = {
            "miner_id": self.miner_id
        }

        try:
            response = requests.get(f"{POOL_URL}/reward_update", headers=headers, params=params)
            response.raise_for_status()
            reward_data = response.json()
            self.reward = reward_data.get("reward", 0.0)
            return self.reward
        except requests.RequestException as e:
            raise Exception(f"Failed to get reward: {e}")

    def status(self) -> dict:
        """
        Returns the status of the miner.

        Returns:
            dict: A dictionary with the status information of the miner.
        """
        return {
            "miner_id": self.miner_id,
            "currently_active": self.currently_active,
            "total_shares": self.total_shares,
            "reward": self.reward
        }


# Test outputs to verify functionality:

if __name__ == "__main__":
    import random

    # Create a miner instance with a specific hash rate for testing
    test_hash_rate = random.uniform(80, 120)  # Random hash rate between 80 and 120
    miner = Miner(miner_id="miner_01", miner_api_key="testingapikey", hash_rate=test_hash_rate)

    try:
        # Connect the miner to the pool
        connect_response = miner.connect_to_pool()
        print(f"Connected to pool: {connect_response}")

        # Generate and submit a share
        share_response = miner.generate_share()
        print(f"Share submitted: {share_response}")

        # Get current reward
        reward = miner.get_reward()
        print(f"Current reward: {reward}")

        # Display current status
        status = miner.status()
        print(f"Miner status: {status}")

    except Exception as e:
        print(f"Error: {e}")
